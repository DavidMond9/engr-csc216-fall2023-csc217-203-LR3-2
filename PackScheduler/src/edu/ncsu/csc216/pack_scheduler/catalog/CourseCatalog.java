/**
 * 
 */
package edu.ncsu.csc216.pack_scheduler.catalog;

import java.io.FileNotFoundException;
import java.io.IOException;

import edu.ncsu.csc216.pack_scheduler.course.Course;
import edu.ncsu.csc216.pack_scheduler.io.CourseRecordIO;
import edu.ncsu.csc217.collections.list.SortedList;

/**
 * A catalog of courses. Can load from and save to files.
 * 
 * @author Winston, Sean, David
 */
public class CourseCatalog {
	/** A sorted list of courses that make up catalog */
	private SortedList<Course> catalog;
	/** Number of Columns for the array generated by getCourseCatalogue	*/
	private static final int COURSE_CATALOG_COLUMNS = 4;

	/** 
	 * Constructs an empty catalog
	 */
	public CourseCatalog() {
		newCourseCatalog();
	}
	/** 
	 * Constructs an empty catalog
	 */
	public void newCourseCatalog() {
		catalog = new SortedList<Course>();
	}
	
	/** 
	 * Constructs a new catalog, then throws a directory into it
	 * @param inputFile File to load a directory from
	 */
	public CourseCatalog(String inputFile) {
		newCourseCatalog();
		loadCoursesFromFile(inputFile);
	}
	
	
	/**
	 * Constructs the student directory by reading in student information
	 * from the given file.  Throws an IllegalArgumentException if the 
	 * file cannot be found.
	 * @param fileName file containing list of students
	 * @throws IllegalArgumentException if the file cannot be found or read from.
	 */
	public void loadCoursesFromFile(String fileName) {
		try {
			catalog = CourseRecordIO.readCourseRecords(fileName);
		} catch (FileNotFoundException e) {
			throw new IllegalArgumentException("Unable to read file " + fileName);
		}
	}
	
	/**
	 * Adds a course to the Catalog given the components of a Course
	 * @param name The name of the course to be added
	 * @param title The title of the course to be added
	 * @param section The section of the course to be added
	 * @param credits The amount of credits the course is worth
	 * @param instructorId The ID of the course's instructor
	 * @param enrollmentCap The enrollment capacity of the Course.
	 * @param meetingDays The days of the week the course meets
	 * @param startTime The time the course starts
	 * @param endTime The time the course ends
	 * @return False if the course is already in the catalog, True if it was added
	 */
	public boolean addCourseToCatalog(String name, String title, String section, int credits, String instructorId, int enrollmentCap, String meetingDays,
			int startTime, int endTime) {
		Course courseToBeAdded = new Course(name, title, section, credits, instructorId, enrollmentCap, meetingDays, startTime, endTime);
		for(int i = 0; i < catalog.size(); i++) {
			if (this.catalog.get(i).isDuplicate(courseToBeAdded)) {
				return false;
			}
		}
		catalog.add(courseToBeAdded);
		return true;
	}
	
	/** 
	 * This method removes an activity from the catalog if it is possible to do so
	 * @param name Name of the course to be removed from catalog
	 * @param section Section of the course to be removed from catalog
	 * @return true if the given course is able to be removed from the catalog,
	 * or false if the course is not in the catalog.
	 */
	public boolean removeCourseFromCatalog(String name, String section) {
		if (catalog.size() == 0){
			return false;
		}
		for(int i = 0; i < catalog.size(); i++) {
			String tempName = this.catalog.get(i).getName();
			String tempSection = this.catalog.get(i).getSection();
			if(name.equals(tempName) && section.equals(tempSection)) {
				catalog.remove(i);
				return true;
			}
		}
		return false;
	}
	
	/**
	 * This method iterates through the catalog array list searching for a course
	 * that matches the given course name and section.
	 * @param name courseName
	 * @param section courseSection
	 * @return a course from ArrayListcatalog with given name and section,
	 * or null if no matching course is found
	 */
	public Course getCourseFromCatalog(String name, String section) {
		for(int i = 0; i < catalog.size(); i++) {
			String tempName = this.catalog.get(i).getName();
			String tempSection = this.catalog.get(i).getSection();
			if(name.equals(tempName) && section.equals(tempSection)) {
				return this.catalog.get(i);
			}
		}
		return null;
	}
	/** 
	 * This method returns a 2D String array with a row for each course,
	 * and a column for name, section, and title, meeting information. This is used for the GUI
	 * to create a table of catalog information. If catalog is empty, an empty string 
	 * array is returned instead.
	 * @return a 2D string array with course names, titles, and sections, meeting information
	 */
	public String[][] getCourseCatalog() {
		if (catalog.size() == 0) {
			return new String[0][0];
		} else {
			String[][] courseCatalog = new String[catalog.size()][COURSE_CATALOG_COLUMNS];
			for(int i = 0; i < catalog.size(); i++) {
				Course c = catalog.get(i);
				courseCatalog[i] = c.getShortDisplayArray();
			}
			return courseCatalog;
		}
	}
	/** 
	 * This method receives a filename as a string, and calls CourseRecordIO
	 * to write the student's schedule to a file.
	 * @param fileName where the student's file will be saved
	 * @throws IllegalArgumentException if the file cannot be found or saved to.
	 */
	public void saveCourseCatalog(String fileName) {
		try {
			CourseRecordIO.writeCourseRecords(fileName, catalog);
		} catch (IOException e) {
			throw new IllegalArgumentException("The file cannot be saved.");
		}
	}
}
